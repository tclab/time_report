/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * TimeReportIndex.java
 *
 * Created on Jun 6, 2009, 10:50:31 AM
 */
package com.innova.TimeReport.vista;

import com.innova.TimeReport.bo.ProyectoBO;
import com.innova.TimeReport.bo.TareaBO;
import com.innova.TimeReport.bo.TiempoBO;
import com.innova.TimeReport.dao.ProyectoDAO;
import com.innova.TimeReport.dao.TareaDAO;
import com.innova.TimeReport.dao.TiempoDAO;
import com.innova.TimeReport.utils.Utils;
import java.awt.Image;
import java.awt.Toolkit;
import java.text.ParseException;
import java.util.Iterator;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author juan
 */
public class TimeReportIndex extends javax.swing.JFrame {

    private TareaDAO tareasDao = new TareaDAO();
    private ProyectoDAO proyectosDao = new ProyectoDAO();
    private TiempoDAO tiempoDao = new TiempoDAO();
    private TareaBO tarea = new TareaBO();
    private static TimeReportIndex index;

    /** Creates new form TimeReportIndex */
    public TimeReportIndex() {
        temaAplicacion();
        initComponents();
        llenarProyetos();
        jTable1.setAutoCreateRowSorter(true);
        jTable2.setAutoCreateRowSorter(true);
        jTable3.setAutoCreateRowSorter(true);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jButton5 = new javax.swing.JButton();
        jButton14 = new javax.swing.JButton();
        jButton15 = new javax.swing.JButton();
        jButton17 = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        jButton18 = new javax.swing.JButton();
        jButton19 = new javax.swing.JButton();
        jButton20 = new javax.swing.JButton();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jRadioButton3 = new javax.swing.JRadioButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jSeparator1 = new javax.swing.JSeparator();
        jMenuItem2 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("TimeReport");
        setIconImage(getIconImage());
        setMinimumSize(new java.awt.Dimension(736, 488));

        jLabel1.setFont(new java.awt.Font("Droid Sans", 1, 36));
        jLabel1.setText("Proyecto");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Tareas", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Droid Sans", 1, 14))); // NOI18N

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Tarea", "Tiempo"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.getTableHeader().setReorderingAllowed(false);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                clickTareas(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jButton2.setText("Nueva");
        jButton2.setMaximumSize(new java.awt.Dimension(63, 31));
        jButton2.setMinimumSize(new java.awt.Dimension(63, 31));
        jButton2.setPreferredSize(new java.awt.Dimension(63, 31));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Editar");
        jButton3.setMaximumSize(new java.awt.Dimension(63, 31));
        jButton3.setMinimumSize(new java.awt.Dimension(63, 31));
        jButton3.setPreferredSize(new java.awt.Dimension(63, 31));
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Eliminar");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton4)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 282, Short.MAX_VALUE)
                .addContainerGap())
        );

        jButton1.setText("Limpiar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Tiempos", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Droid Sans", 1, 13))); // NOI18N

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Num", "Fe. Inicio", "Fe. Fin", "Tiempo"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable2.getTableHeader().setReorderingAllowed(false);
        jScrollPane3.setViewportView(jTable2);

        jButton5.setText("Nuevo");
        jButton5.setMaximumSize(new java.awt.Dimension(63, 31));
        jButton5.setMinimumSize(new java.awt.Dimension(63, 31));
        jButton5.setPreferredSize(new java.awt.Dimension(63, 31));
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton14.setText("Iniciar");
        jButton14.setMaximumSize(new java.awt.Dimension(63, 31));
        jButton14.setMinimumSize(new java.awt.Dimension(63, 31));
        jButton14.setPreferredSize(new java.awt.Dimension(63, 31));
        jButton14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton14ActionPerformed(evt);
            }
        });

        jButton15.setText("Detener");
        jButton15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton15ActionPerformed(evt);
            }
        });

        jButton17.setText("Eliminar");
        jButton17.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton17ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton15)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton17))
                    .addComponent(jScrollPane3))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton15)
                    .addComponent(jButton17))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 282, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Proyecto", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Droid Sans", 1, 13))); // NOI18N

        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nombre", "Fe. Inicio", "Fe. Fin", "Tiempo", "Tareas", "Cerrado"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable3.getTableHeader().setReorderingAllowed(false);
        jTable3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                seleccionProyecto(evt);
            }
        });
        jScrollPane2.setViewportView(jTable3);

        jButton18.setText("Nuevo");
        jButton18.setMaximumSize(new java.awt.Dimension(63, 31));
        jButton18.setMinimumSize(new java.awt.Dimension(63, 31));
        jButton18.setPreferredSize(new java.awt.Dimension(63, 31));
        jButton18.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton18ActionPerformed(evt);
            }
        });

        jButton19.setText("Editar");
        jButton19.setMaximumSize(new java.awt.Dimension(63, 31));
        jButton19.setMinimumSize(new java.awt.Dimension(63, 31));
        jButton19.setPreferredSize(new java.awt.Dimension(63, 31));
        jButton19.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton19ActionPerformed(evt);
            }
        });

        jButton20.setText("Eliminar");
        jButton20.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton20ActionPerformed(evt);
            }
        });

        buttonGroup1.add(jRadioButton1);
        jRadioButton1.setText("Todos");
        jRadioButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton1ActionPerformed(evt);
            }
        });

        buttonGroup1.add(jRadioButton2);
        jRadioButton2.setText("Cerrados");
        jRadioButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton2ActionPerformed(evt);
            }
        });

        buttonGroup1.add(jRadioButton3);
        jRadioButton3.setSelected(true);
        jRadioButton3.setText("Abiertos");
        jRadioButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 792, Short.MAX_VALUE)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jButton18, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton19, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton20)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 361, Short.MAX_VALUE)
                        .addComponent(jRadioButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jRadioButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jRadioButton1)))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton18, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton19, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton20))
                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jRadioButton1)
                        .addComponent(jRadioButton2)
                        .addComponent(jRadioButton3)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 117, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jButton1, javax.swing.GroupLayout.Alignment.LEADING))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addContainerGap())
        );

        jMenu1.setText("Archivo");
        jMenu1.add(jSeparator1);

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem2.setText("Salir");
        jMenuItem2.setToolTipText("");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Boton limpiar tareas de la ventana de consultas.
     * @param evt
     */
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        limpiar();
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * JMenuItem salir. Opcion salir del menu.
     * @param evt
     */
    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    /**
     * JTable tareas. Seleccionar una tarea.
     * @param evt
     */
    private void clickTareas(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_clickTareas
        int clics = evt.getClickCount();

        if (clics == 1) {
            llenarTiempos();
        }
    }//GEN-LAST:event_clickTareas

    /**
     * Boton nueva Tarea. (Ventana principal)
     * @param evt
     */
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        ListSelectionModel seleccionTareas = jTable3.getSelectionModel();

        if (!seleccionTareas.isSelectionEmpty()) {

            DefaultTableModel tablaProyectos = (DefaultTableModel) jTable3.getModel();
            int tareaFilaSeleccionada = jTable3.convertRowIndexToModel(jTable3.getSelectedRow());

            String proyecto = tablaProyectos.getValueAt(tareaFilaSeleccionada, 0).toString();
            NuevaTarea nuevaT = new NuevaTarea(proyecto, index, tareaFilaSeleccionada);
            nuevaT.setLocationRelativeTo(null);
            nuevaT.setVisible(true);
        } else {
            JOptionPane.showConfirmDialog(jPanel1, "Seleccione primero un " +
                    "proyecto.", "Error", -1, JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * Jtable proyectos. Selecciona un proyecto de la tabla de proyectos.
     * @param evt
     */
    private void seleccionProyecto(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_seleccionProyecto
        int clics = evt.getClickCount();
        int proyectofilaSelccionada = 0;

        if (clics == 1) {
            DefaultTableModel tablaProyectos = (DefaultTableModel) jTable3.getModel();
            DefaultTableModel tablaTarea = (DefaultTableModel) jTable1.getModel();
            DefaultTableModel tablaTiempos = (DefaultTableModel) jTable2.getModel();
            proyectofilaSelccionada = jTable3.convertRowIndexToModel(jTable3.getSelectedRow());

            if (tablaProyectos.getValueAt(proyectofilaSelccionada, 0) != null) {
                String proyecto = tablaProyectos.getValueAt(proyectofilaSelccionada, 0).toString();

                jLabel1.setText(proyecto);

                //Limpia primero la tabla. Luego inserta datos.
                int numFilasTareas = tablaTarea.getRowCount();
                for (int j = 0; j < numFilasTareas; j++) {
                    tablaTarea.removeRow(0);
                }

                int numFilasTiempos = tablaTiempos.getRowCount();
                for (int j = 0; j < numFilasTiempos; j++) {
                    tablaTiempos.removeRow(0);
                }

                //Trae las tareas de la base de datos.
                Vector<TareaBO> tareas = tareasDao.getTareas(proyecto);

                //Llena la tabla con las tareas recuperadas.
                TareaBO tarea = new TareaBO();
                Iterator<TareaBO> iterador = tareas.iterator();
                while (iterador.hasNext()) {
                    tarea = iterador.next();
                    Object nuevo[] = {tarea.getNombreTarea(), tarea.getTiempo()};
                    tablaTarea.addRow(nuevo);
                }
            }
        }
    }//GEN-LAST:event_seleccionProyecto

    /**
     * Boton eliminar tarea.
     * @param evt
     */
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed

        ListSelectionModel seleccionTareas = jTable1.getSelectionModel();

        if (!seleccionTareas.isSelectionEmpty()) {

            DefaultTableModel tablaTareas = (DefaultTableModel) jTable1.getModel();
            DefaultTableModel tablaProyectos = (DefaultTableModel) jTable3.getModel();
            DefaultTableModel tablaTiempos = (DefaultTableModel) jTable2.getModel();
            int filaTablaProyectos = jTable3.convertRowIndexToModel(jTable3.getSelectedRow());
            int filaTablaTareas = jTable1.convertRowIndexToModel(jTable1.getSelectedRow());

            String nombreTarea = tablaTareas.getValueAt(filaTablaTareas, 0).toString();
            String nombreProyecto = tablaProyectos.getValueAt(filaTablaProyectos, 0).toString();
            String tiempoTarea = tablaTareas.getValueAt(filaTablaTareas, 1).toString();

            TareaBO modTarea = new TareaBO();
            modTarea.setNombreTarea(nombreTarea);
            modTarea.setProyecto(nombreProyecto);
            modTarea.setTiempo(tiempoTarea);

            boolean resultado = tareasDao.eliminarTarea(modTarea);

            if (resultado) {
                JOptionPane.showConfirmDialog(jPanel1, "Tarea eliminada", "Info",
                        -1, JOptionPane.INFORMATION_MESSAGE);
                llenarProyetos();
                setProyectoSeleccionado(filaTablaProyectos);
                llenarTareas();

                int filasTiempos = tablaTiempos.getRowCount();
                for (int j = 0; j < filasTiempos; j++) {
                    tablaTiempos.removeRow(0);
                }

            } else {
                JOptionPane.showConfirmDialog(jPanel1, "Ocurrio un error eliminando la" +
                        "tarea.\n Intente de nuevo", "Error", -1, JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showConfirmDialog(jPanel1, "Seleccione primero una tarea a " +
                    "eliminar.", "Error", -1, JOptionPane.ERROR_MESSAGE);
        }


    }//GEN-LAST:event_jButton4ActionPerformed

    /**
     * Boton editar tarea
     * @param evt
     */
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        ListSelectionModel seleccionTareas = jTable1.getSelectionModel();

        if (!seleccionTareas.isSelectionEmpty()) {

            DefaultTableModel tablaTareas = (DefaultTableModel) jTable1.getModel();
            DefaultTableModel tablaProyectos = (DefaultTableModel) jTable3.getModel();
            int filaTablaProyectos = jTable3.convertRowIndexToModel(jTable3.getSelectedRow());
            int filaTablaTareas = jTable1.convertRowIndexToModel(jTable1.getSelectedRow());

            String nombreTarea = tablaTareas.getValueAt(filaTablaTareas, 0).toString();
            String nombreProyecto = tablaProyectos.getValueAt(filaTablaProyectos, 0).toString();
            String tiempoTarea = tablaTareas.getValueAt(filaTablaTareas, 1).toString();

            TareaBO modTarea = new TareaBO();
            modTarea.setNombreTarea(nombreTarea);
            modTarea.setProyecto(nombreProyecto);
            modTarea.setTiempo(tiempoTarea);
            modTarea.setComentario(tareasDao.getComentario(nombreTarea));

            ModificarTarea modificar = new ModificarTarea(modTarea, index, filaTablaProyectos, filaTablaTareas);
            modificar.setLocationRelativeTo(null);
            modificar.setVisible(true);
        } else {
            JOptionPane.showConfirmDialog(jPanel1, "Seleccione primero una tarea a " +
                    "modificar.", "Error", -1, JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * Boton nuevo proyecto. (ventana principal)
     * @param evt
     */
    private void jButton18ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton18ActionPerformed

        String nombre = JOptionPane.showInputDialog(jPanel5, "Ingrese el " +
                "nombre del nuevo Proyecto", "Nuevo proyecto", JOptionPane.QUESTION_MESSAGE);

        if (nombre != null) {
            if ((nombre.length() > 0) && (nombre.length() < 50)) {

                String feInicio = new Utils().fechaActual();
                String feFin = null;
                String tiempo = "0";
                boolean estado = false;

                ProyectoBO proyecto = new ProyectoBO(nombre, feInicio, feFin, tiempo, estado);

                proyectosDao.nuevoProyecto(proyecto);

                //Se añade el proyecto a la lista correspondientes.
                llenarProyetos();
                limpiar();
            } else {
                JOptionPane.showConfirmDialog(jPanel1, "No es un nombre de proyecto valido." +
                        "\nVerifique que no tenga mas de 50 caracteres.", "Error", -1, JOptionPane.ERROR_MESSAGE);
            }
        }

    }//GEN-LAST:event_jButton18ActionPerformed

    /**
     * Boton eliminar proyecto. (Ventana principal)
     * @param evt
     */
    private void jButton20ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton20ActionPerformed
        ListSelectionModel seleccionProyectos = jTable3.getSelectionModel();

        if (!seleccionProyectos.isSelectionEmpty()) {

            int eliminar = JOptionPane.showConfirmDialog(jPanel5, "Realmente desea " +
                    "eliminar el proyecto y todas sus tareas.", "Alerta",
                    JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);

            if (eliminar == 0) {
                DefaultTableModel tablaProyectos = (DefaultTableModel) jTable3.getModel();
                int filaProySeleccionado = jTable3.convertRowIndexToModel(jTable3.getSelectedRow());

                String nombreProyecto = tablaProyectos.getValueAt(filaProySeleccionado, 0).toString();

                ProyectoBO aEliminar = new ProyectoBO();
                aEliminar.setNombre(nombreProyecto);

                proyectosDao.eliminarProyecto(aEliminar);

                llenarProyetos();
                limpiar();
            }
        } else {
            JOptionPane.showConfirmDialog(jPanel5, "Seleccione primero un proyecto a " +
                    "Eliminar.", "Error", -1, JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton20ActionPerformed

    /**
     * jRadioButton abiertos. Muestra los proyectos abiertos.
     * @param evt
     */
    private void jRadioButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton3ActionPerformed
        DefaultTableModel tablaTareas = (DefaultTableModel) jTable1.getModel();
        DefaultTableModel tablaTiempos = (DefaultTableModel) jTable2.getModel();

        proyectosAbiertos();

        int filasTareas = tablaTareas.getRowCount();
        for (int j = 0; j < filasTareas; j++) {
            tablaTareas.removeRow(0);
        }

        int filasTiempos = tablaTiempos.getRowCount();
        for (int j = 0; j < filasTiempos; j++) {
            tablaTiempos.removeRow(0);
        }

    }//GEN-LAST:event_jRadioButton3ActionPerformed

    /**
     * jRadioButton cerrados. Muestra los proyectos cerrados.
     * @param evt
     */
    private void jRadioButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton2ActionPerformed
        DefaultTableModel tablaTareas = (DefaultTableModel) jTable1.getModel();
        DefaultTableModel tablaTiempos = (DefaultTableModel) jTable2.getModel();

        proyectosCerrados();

        int filasTareas = tablaTareas.getRowCount();
        for (int j = 0; j < filasTareas; j++) {
            tablaTareas.removeRow(0);
        }

        int filasTiempos = tablaTiempos.getRowCount();
        for (int j = 0; j < filasTiempos; j++) {
            tablaTiempos.removeRow(0);
        }

    }//GEN-LAST:event_jRadioButton2ActionPerformed

    /**
     * jRadioButton todos. Muestra todos los proyecto.
     * @param evt
     */
    private void jRadioButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton1ActionPerformed
        DefaultTableModel tablaTareas = (DefaultTableModel) jTable1.getModel();
        DefaultTableModel tablaTiempos = (DefaultTableModel) jTable2.getModel();

        proyectosTodos();

        int filasTareas = tablaTareas.getRowCount();
        for (int j = 0; j < filasTareas; j++) {
            tablaTareas.removeRow(0);
        }

        int filasTiempos = tablaTiempos.getRowCount();
        for (int j = 0; j < filasTiempos; j++) {
            tablaTiempos.removeRow(0);
        }

    }//GEN-LAST:event_jRadioButton1ActionPerformed

    /**
     * Boton editar proyecto.
     * @param evt
     */
    private void jButton19ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton19ActionPerformed

        ListSelectionModel seleccionProyectos = jTable3.getSelectionModel();


        if (!seleccionProyectos.isSelectionEmpty()) {

            DefaultTableModel tablaProyectos = (DefaultTableModel) jTable3.getModel();
            int proyectosFilaSeleccionada = jTable3.convertRowIndexToModel(jTable3.getSelectedRow());

            ProyectoBO proyecto = new ProyectoBO();
            proyecto.setNombre(tablaProyectos.getValueAt(proyectosFilaSeleccionada, 0).toString());
            if (tablaProyectos.getValueAt(proyectosFilaSeleccionada, 5).toString().equals("false")) {
                proyecto.setCerrado(false);
            } else {
                proyecto.setCerrado(true);
            }

            ModificarProyecto modProyecto = new ModificarProyecto(index, proyecto, proyectosFilaSeleccionada);
            modProyecto.setLocationRelativeTo(null);
            modProyecto.setVisible(true);
        } else {
            JOptionPane.showConfirmDialog(jPanel5, "Seleccione primero un proyecto a " +
                    "modificar.", "Error", -1, JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_jButton19ActionPerformed

    /**
     * Boton nuevo tiempo.
     * @param evt
     */
    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed

        ListSelectionModel seleccionProyectos = jTable1.getSelectionModel();


        if (!seleccionProyectos.isSelectionEmpty()) {

            TiempoBO tiempo = new TiempoBO();
            DefaultTableModel tablaTareas = (DefaultTableModel) jTable1.getModel();
            DefaultTableModel tablaProyectos = (DefaultTableModel) jTable3.getModel();

            int tareasFilaSeleccionada = jTable1.convertRowIndexToModel(jTable1.getSelectedRow());
            int proyectoFilaSeleccionada = jTable3.convertRowIndexToModel(jTable3.getSelectedRow());

            String tareaTiempo = tablaTareas.getValueAt(tareasFilaSeleccionada, 0).toString();
            String nombreProyecto = tablaProyectos.getValueAt(proyectoFilaSeleccionada, 0).toString();

            tiempo.setTarea(tareaTiempo);
            tiempo.setProyecto(nombreProyecto);

            if (!tiempoDao.nuevoTiempo(tiempo)) {
                JOptionPane.showConfirmDialog(jPanel3, "Se produjo un error " +
                        "creando el tiempo.", "Error", -1, JOptionPane.ERROR_MESSAGE);
            } else {
                llenarTiempos();
            }

        } else {
            JOptionPane.showConfirmDialog(jPanel3, "Seleccione primero una tarea.", "Error", -1, JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_jButton5ActionPerformed

    /**
     * Boton eliminar tiempo.
     * @param evt
     */
    private void jButton17ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton17ActionPerformed

        ListSelectionModel seleccionTiempos = jTable2.getSelectionModel();

        if (!seleccionTiempos.isSelectionEmpty()) {

            DefaultTableModel tablaTareas = (DefaultTableModel) jTable1.getModel();
            DefaultTableModel tablaTiempos = (DefaultTableModel) jTable2.getModel();
            DefaultTableModel tablaProyectos = (DefaultTableModel) jTable3.getModel();

            int tiempoFilaSeleccionada = jTable2.convertRowIndexToModel(jTable2.getSelectedRow());
            int tareasFilaSeleccionada = jTable1.convertRowIndexToModel(jTable1.getSelectedRow());
            int proyectosFilaSeleccionada = jTable3.convertRowIndexToModel(jTable3.getSelectedRow());

            String id = tablaTiempos.getValueAt(tiempoFilaSeleccionada, 0).toString();
            String nomProyecto = tablaProyectos.getValueAt(proyectosFilaSeleccionada, 0).toString();
            String nomTarea = tablaTareas.getValueAt(tareasFilaSeleccionada, 0).toString();
            String tiempoIntervalo = null;

            try{
                tiempoIntervalo = tablaTiempos.getValueAt(tiempoFilaSeleccionada, 3).toString();
            } catch (NullPointerException e){
                tiempoIntervalo = null;
            }
            

            TiempoBO tiempo = new TiempoBO();
            tiempo.setTiempoId(id);
            tiempo.setProyecto(nomProyecto);
            tiempo.setTarea(nomTarea);
            tiempo.setTiempo(tiempoIntervalo);

            if (!tiempoDao.eliminarTiempo(tiempo)) {
                JOptionPane.showConfirmDialog(jPanel3, "Se produjo un error " +
                        "eliminando el tiempo.", "Error", -1, JOptionPane.ERROR_MESSAGE);
            } else {
                llenarTiempos();
                llenarProyetos();
                setProyectoSeleccionado(proyectosFilaSeleccionada);
                llenarTareas();
                setTareaSeleccionada(tareasFilaSeleccionada);
            }

        } else {
            JOptionPane.showConfirmDialog(jPanel3, "Seleccione primero " +
                    "un tiempo.", "Error", -1, JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_jButton17ActionPerformed

    /**
     * Boton iniciar tiempo.
     * @param evt
     */
    private void jButton14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton14ActionPerformed

        ListSelectionModel seleccionTiempos = jTable2.getSelectionModel();

        if (!seleccionTiempos.isSelectionEmpty()) {
            DefaultTableModel tablaTiempos = (DefaultTableModel) jTable2.getModel();
            int tiempoFilaSeleccionada = jTable2.convertRowIndexToModel(jTable2.getSelectedRow());

            if (tablaTiempos.getValueAt(tiempoFilaSeleccionada, 1) == null) {
                DefaultTableModel tablaTareas = (DefaultTableModel) jTable1.getModel();

                int tareasFilaSeleccionada = jTable1.convertRowIndexToModel(jTable1.getSelectedRow());

                String id = tablaTiempos.getValueAt(tiempoFilaSeleccionada, 0).toString();
                String tareaTiempo = tablaTareas.getValueAt(tareasFilaSeleccionada, 0).toString();
                String feIncio = new Utils().dateTimeActual();

                TiempoBO tiempo = new TiempoBO();
                tiempo.setTiempoId(id);
                tiempo.setTarea(tareaTiempo);
                tiempo.setFeInicio(feIncio);

                if (!tiempoDao.empezarTiempo(tiempo)) {
                    JOptionPane.showConfirmDialog(jPanel3, "Se produjo un error " +
                            "iniciando el tiempo.", "Error", -1, JOptionPane.ERROR_MESSAGE);
                } else {
                    llenarTiempos();
                    setTiempoSeleccionado(tiempoFilaSeleccionada);
                }

            } else {
                JOptionPane.showConfirmDialog(jPanel3, "Este intervalo ya ha sido iniciado." +
                        "\nInicie uno nuevo.", "Error", -1, JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showConfirmDialog(jPanel3, "Seleccione primero " +
                    "un intervalo de tiempo.", "Error", -1, JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_jButton14ActionPerformed

    /**
     * Boton terminar intervalo de timepo.
     * @param evt
     */
    private void jButton15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton15ActionPerformed
        ListSelectionModel seleccionTiempos = jTable2.getSelectionModel();

        //Se verifica que se tengan intervalos de tiempo seleccionados.
        if (!seleccionTiempos.isSelectionEmpty()) {

            DefaultTableModel tablaTiempos = (DefaultTableModel) jTable2.getModel();
            int tiempoFilaSeleccionada = jTable2.convertRowIndexToModel(jTable2.getSelectedRow());

            //Se verifica que se halla inciado el intervalo de tiempo.
            if (tablaTiempos.getValueAt(tiempoFilaSeleccionada, 1) != null) {
                if (tablaTiempos.getValueAt(tiempoFilaSeleccionada, 2) == null) {
                    DefaultTableModel tablaTareas = (DefaultTableModel) jTable1.getModel();
                    DefaultTableModel tablaProyectos = (DefaultTableModel) jTable3.getModel();

                    int proyectoFilaSeleccionada = jTable3.convertRowIndexToModel(jTable3.getSelectedRow());
                    int tareasFilaSeleccionada = jTable1.convertRowIndexToModel(jTable1.getSelectedRow());

                    String id = tablaTiempos.getValueAt(tiempoFilaSeleccionada, 0).toString();
                    String tareaIntervalo = tablaTareas.getValueAt(tareasFilaSeleccionada, 0).toString();
                    String feFin = new Utils().dateTimeActual();
                    String feInicio = tiempoDao.obtenerInicio(tareaIntervalo, id); //TODO: obtener feInicio y calcular tiempo trabajado.
                    String hInicio = new String();
                    String hFin = new String();
                    try {
                        hInicio = new Utils().hora(feInicio);
                        hFin = new Utils().hora(feFin);
                    } catch (ParseException ex) {
                        Logger.getLogger(TimeReportIndex.class.getName()).log(Level.SEVERE, null, ex);
                    }

                    String nombreProyecto = tablaProyectos.getValueAt(proyectoFilaSeleccionada, 0).toString();

                    TiempoBO tiempo = new TiempoBO();
                    tiempo.setTiempoId(id);
                    tiempo.setTarea(tareaIntervalo);
                    tiempo.setFeFin(feFin);
                    tiempo.setFeInicio(feInicio);
                    tiempo.setProyecto(nombreProyecto);

                    if (!tiempoDao.terminarTiempo(tiempo, hInicio, hFin)) {
                        JOptionPane.showConfirmDialog(jPanel3, "Se produjo un error " +
                                "iniciando el tiempo.", "Error", -1, JOptionPane.ERROR_MESSAGE);
                    } else {
                        llenarTiempos();
                        setTiempoSeleccionado(tiempoFilaSeleccionada);
                        llenarProyetos();
                        setProyectoSeleccionado(proyectoFilaSeleccionada);
                        llenarTareas();
                        setTareaSeleccionada(tareasFilaSeleccionada);
                    }
                } else {
                    JOptionPane.showConfirmDialog(jPanel3, "Este intervalo ya esta terminado." +
                            "\nInicie uno nuevo.", "Error", -1, JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showConfirmDialog(jPanel3, "Debe iniciar primero.",
                        "Error", -1, JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showConfirmDialog(jPanel3, "Seleccione primero " +
                    "un intervalo de tiempo.", "Error", -1, JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton15ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                index = new TimeReportIndex();
                index.setLocationRelativeTo(null);
                index.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton14;
    private javax.swing.JButton jButton15;
    private javax.swing.JButton jButton17;
    private javax.swing.JButton jButton18;
    private javax.swing.JButton jButton19;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton20;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JRadioButton jRadioButton3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable jTable3;
    // End of variables declaration//GEN-END:variables

    /**
     * Llena la tabla de tareas.
     */
    public void llenarTareas() {

        DefaultTableModel tablaProyectos = (DefaultTableModel) jTable3.getModel();
        int filaSeleccionada = jTable3.convertRowIndexToModel(jTable3.getSelectedRow());

        String nomProyecto = tablaProyectos.getValueAt(filaSeleccionada, 0).toString();
        jLabel1.setText(nomProyecto);

        DefaultTableModel tablaTareas = (DefaultTableModel) jTable1.getModel();

        //Limpia primero la tabla. Luego inserta datos.
        int numFilas = tablaTareas.getRowCount();
        for (int j = 0; j < numFilas; j++) {
            tablaTareas.removeRow(0);
        }

        //Trae las tareas de la base de datos.
        Vector<TareaBO> tareas = tareasDao.getTareas(nomProyecto);

        //Llena la tabla con las tareas recuperadas.
        TareaBO tareaLlenar = new TareaBO();
        Iterator<TareaBO> iterador = tareas.iterator();
        while (iterador.hasNext()) {
            tareaLlenar = iterador.next();
            Object nuevo[] = {tareaLlenar.getNombreTarea(), tareaLlenar.getTiempo()};
            tablaTareas.addRow(nuevo);
        }
    }

    /**
     * Llena la tabla de timpos.
     */
    public void llenarTiempos() {
        DefaultTableModel tablaTareas = (DefaultTableModel) jTable1.getModel();
        DefaultTableModel tablaTiempos = (DefaultTableModel) jTable2.getModel();
        int filaTareaSeleccionada = jTable1.convertRowIndexToModel(jTable1.getSelectedRow());

        String tareaSeleccionada = tablaTareas.getValueAt(filaTareaSeleccionada, 0).toString();
        Vector<TiempoBO> tiempos = tiempoDao.obtenerTiempos(tareaSeleccionada);

        //Limpia primero la tabla. Luego inserta datos.
        int numFilas = tablaTiempos.getRowCount();
        for (int j = 0; j < numFilas; j++) {
            tablaTiempos.removeRow(0);
        }

        TiempoBO tiempo = new TiempoBO();
        Iterator<TiempoBO> iterador = tiempos.iterator();
        while (iterador.hasNext()) {
            tiempo = iterador.next();
            Object nuevo[] = {tiempo.getTiempoId(), tiempo.getFeInicio(), tiempo.getFeFin(), tiempo.getTiempo()};
            tablaTiempos.addRow(nuevo);
        }
    }

    /**
     * Llena la tabla de proyectos dependiento del tipo seleccionado.
     */
    public void llenarProyetos() {

        if (jRadioButton1.isSelected()) {
            proyectosTodos();
        } else if (jRadioButton2.isSelected()) {
            proyectosCerrados();
        } else if (jRadioButton3.isSelected()) {
            proyectosAbiertos();
        }
    }

    /**
     * Llena la tabla de proyectos con todos los proyectos existentes.
     */
    private void proyectosTodos() {
        Vector<ProyectoBO> proyectos = proyectosDao.proyectosTodos();

        jLabel1.setText("Proyecto");

        DefaultTableModel tabla = (DefaultTableModel) jTable3.getModel();

        //Limpia primero la tabla. Luego inserta datos.
        int numFilas = tabla.getRowCount();
        for (int j = 0; j < numFilas; j++) {
            tabla.removeRow(0);
        }

        ProyectoBO proyecto = new ProyectoBO();
        Iterator<ProyectoBO> iterador = proyectos.iterator();
        while (iterador.hasNext()) {
            proyecto = iterador.next();
            Object nuevo[] = {proyecto.getNombre(), proyecto.getFeInicio(),
                proyecto.getFeFin(), proyecto.getTiempo(), proyecto.getNumTareas(),
                proyecto.getCerrado()};
            tabla.addRow(nuevo);
        }
    }

    /**
     * Llena la tabla de proyectos con los proyectos abiertos.
     */
    private void proyectosAbiertos() {
        Vector<ProyectoBO> proyectos = proyectosDao.proyectosAbiertos();

        jLabel1.setText("Proyecto");

        DefaultTableModel tabla = (DefaultTableModel) jTable3.getModel();

        //Limpia primero la tabla. Luego inserta datos.
        int numFilas = tabla.getRowCount();
        for (int j = 0; j < numFilas; j++) {
            tabla.removeRow(0);
        }

        ProyectoBO proyecto = new ProyectoBO();
        Iterator<ProyectoBO> iterador = proyectos.iterator();
        while (iterador.hasNext()) {
            proyecto = iterador.next();
            Object nuevo[] = {proyecto.getNombre(), proyecto.getFeInicio(),
                proyecto.getFeFin(), proyecto.getTiempo(), proyecto.getNumTareas(),
                proyecto.getCerrado()};
            tabla.addRow(nuevo);
        }
    }

    /**
     * Llena la tabla de proyectos con los proyectos cerrados.
     */
    private void proyectosCerrados() {
        Vector<ProyectoBO> proyectos = proyectosDao.proyectosCerrados();

        jLabel1.setText("Proyecto");

        DefaultTableModel tabla = (DefaultTableModel) jTable3.getModel();

        //Limpia primero la tabla. Luego inserta datos.
        int numFilas = tabla.getRowCount();
        for (int j = 0; j < numFilas; j++) {
            tabla.removeRow(0);
        }

        ProyectoBO proyecto = new ProyectoBO();
        Iterator<ProyectoBO> iterador = proyectos.iterator();
        while (iterador.hasNext()) {
            proyecto = iterador.next();
            Object nuevo[] = {proyecto.getNombre(), proyecto.getFeInicio(),
                proyecto.getFeFin(), proyecto.getTiempo(), proyecto.getNumTareas(),
                proyecto.getCerrado()};
            tabla.addRow(nuevo);
        }
    }

    public void limpiar() {
        DefaultTableModel tablaTareas = (DefaultTableModel) jTable1.getModel();
        DefaultTableModel tablaTiempos = (DefaultTableModel) jTable2.getModel();
        ListSelectionModel seleccionProyectos = jTable3.getSelectionModel();

        jLabel1.setText("Proyecto");

        if (jRadioButton3.isSelected()) {
            proyectosAbiertos();
        } else if (jRadioButton2.isSelected()) {
            proyectosCerrados();
        } else if (jRadioButton1.isSelected()) {
            proyectosTodos();
        }

        seleccionProyectos.clearSelection();

        int filasTareas = tablaTareas.getRowCount();
        for (int j = 0; j < filasTareas; j++) {
            tablaTareas.removeRow(0);
        }

        int filasTiempos = tablaTiempos.getRowCount();
        for (int j = 0; j < filasTiempos; j++) {
            tablaTiempos.removeRow(0);
        }
    }

    /**
     * Marca como seleccionada la fila de la tabla de proyectos que se le pasa como parametro
     * @param filaSeleccionada
     */
    public void setProyectoSeleccionado(int filaSeleccionada) {
        ListSelectionModel tablaProyectos = jTable3.getSelectionModel();
        int proyectoSeleccionado = jTable3.convertRowIndexToView(filaSeleccionada);
        tablaProyectos.setSelectionInterval(proyectoSeleccionado, proyectoSeleccionado);
    }

    /**
     * Marca como seleccionada la fila de la tabla de tareas que se le pasa como parametro
     * @param filaSeleccionada
     */
    public void setTareaSeleccionada(int filaSeleccionada) {
        ListSelectionModel tablaTareas = jTable1.getSelectionModel();
        int tareaSeleccionada = jTable1.convertRowIndexToView(filaSeleccionada);
        tablaTareas.setSelectionInterval(tareaSeleccionada, tareaSeleccionada);
    }

    /**
     * Marca como seleccionada la fila de la tabla de tiempos que se le pasa como parametro
     * @param filaSeleccionada
     */
    public void setTiempoSeleccionado(int filaSeleccionada) {
        ListSelectionModel tablaTiempos = jTable2.getSelectionModel();
        int tiempoSeleccionado = jTable2.convertRowIndexToView(filaSeleccionada);
        tablaTiempos.setSelectionInterval(tiempoSeleccionado, tiempoSeleccionado);
    }

    @Override
    public Image getIconImage() {
        Image retValue = Toolkit.getDefaultToolkit().
                getImage(ClassLoader.getSystemResource("imagenes/xclock.png"));
        return retValue;
    }


    /**
     * Cambia el aspecto de la aplicacion al del sistema operativo.
     */
    private void temaAplicacion() {
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (Exception ex) {
            Logger.getLogger(TimeReportIndex.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
}
